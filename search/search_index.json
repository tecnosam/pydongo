{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydongo","text":"<p>Pydongo is a lightweight and expressive ORM for MongoDB powered by Pydantic.</p> <p>It brings structure and type safety to your unstructured NoSQL world \u2014 giving you clean, Pythonic control over your MongoDB documents.</p>"},{"location":"#why-use-pydongo","title":"\ud83d\ude80 Why Use Pydongo?","text":"<ul> <li>\u2705 Pydantic-first: Write your models as <code>BaseModel</code> classes \u2014 just like you're used to</li> <li>\ud83d\udd04 Sync + Async support via <code>pymongo</code> and <code>motor</code></li> <li>\ud83e\udde0 Elegant Query DSL: Express Mongo filters using <code>==</code>, <code>&gt;</code>, <code>&amp;</code>, <code>|</code> and more</li> <li>\ud83e\uddea Built for Testing: In-memory mock driver makes unit testing easy</li> <li>\ud83e\uddf0 No boilerplate: Automatically connects models to collections</li> <li>\ud83d\udce6 Tiny but powerful: Focused API, zero clutter</li> </ul>"},{"location":"#example","title":"\ud83e\uddf1 Example","text":"<pre><code>from pydantic import BaseModel\nfrom pydongo import as_document, as_collection\nfrom pydongo.drivers.sync_mongo import DefaultMongoDBDriver\n\nclass User(BaseModel):\n    name: str\n    age: int\n    collection_name = \"users\"\n\ndriver = DefaultMongoDBDriver(\"mongodb://localhost:27017\", \"mydb\")\ndriver.connect()\n\n# Insert a document\ndoc = as_document(User(name=\"Alice\", age=30), driver)\ndoc.save()\n\n# Query with expressive DSL\ncollection = as_collection(User, driver)\nresults = collection.find(collection.age &gt; 25).all()\n\nfor user in results:\n    print(user.name, user.age)\n\ndriver.close()\n</code></pre>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>Installation</li> <li>Quickstart</li> </ul>"},{"location":"#get-involved","title":"\ud83d\udcac Get Involved","text":"<p>Contributions welcome! Check out the contributing guide or open an issue on GitHub.</p>"},{"location":"#license","title":"\ud83e\uddfe License","text":"<p>Pydongo is open source under the MIT License.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install pydongo\n</code></pre> <p>Or with Poetry:</p> <pre><code>poetry add pydongo\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.9+</li> <li><code>pymongo</code> (auto-installed)</li> <li><code>motor</code> (for async support)</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#quickstart","title":"Quickstart","text":"<p>This guide walks you through creating and interacting with MongoDB documents using <code>Pydongo</code> \u2014 covering both Document and Collection workers.</p>"},{"location":"quickstart/#step-1-define-a-pydantic-model","title":"\ud83e\uddf1 Step 1: Define a Pydantic Model","text":"<pre><code>from pydantic import BaseModel\n\nclass User(BaseModel):\n    name: str\n    age: int\n</code></pre>"},{"location":"quickstart/#step-2-connect-to-mongodb","title":"\ud83d\udd0c Step 2: Connect to MongoDB","text":"<pre><code>from pydongo.drivers.sync_mongo import DefaultMongoDBDriver\n\ndriver = DefaultMongoDBDriver(\"mongodb://localhost:27017\", \"mydb\")\ndriver.connect()\n</code></pre>"},{"location":"quickstart/#step-3-use-the-document-worker-create-update-delete","title":"\ud83d\udcc4 Step 3: Use the Document Worker (create, update, delete)","text":"<pre><code>from pydongo import as_document\n\n# Create and save a new user\nuser = User(name=\"Alice\", age=30)\ndoc = as_document(user, driver)\ndoc.save()\n\n# Update user and save again\ndoc.age = 31\ndoc.save()\n\n# Delete user\ndoc.delete()\n</code></pre>"},{"location":"quickstart/#step-4-use-the-collection-worker-query-read","title":"\ud83d\udce6 Step 4: Use the Collection Worker (query, read)","text":"<pre><code>from pydongo import as_collection\n\ncollection = as_collection(User, driver)\n\n# Insert multiple users\nusers = [\n    User(name=\"Bob\", age=25),\n    User(name=\"Charlie\", age=35),\n    User(name=\"Diana\", age=40),\n]\nfor user in users:\n    as_document(user, driver).save()\n\n# Query users older than 30\nresults = collection.find(collection.age &gt; 30).all()\nfor result in results:\n    print(f\"{result.name} - {result.age}\")\n\n# Find one\nbob = collection.find_one(collection.name == \"Bob\")\nif bob:\n    print(\"Found Bob:\", bob.age)\n\n# Delete via result\nif bob:\n    bob.delete()\n</code></pre>"},{"location":"quickstart/#step-5-close-the-driver","title":"\u2705 Step 5: Close the driver","text":"<pre><code>driver.close()\n</code></pre> <p>This covers basic CRUD using: - <code>as_document()</code> for direct document operations - <code>as_collection()</code> for querying multiple documents</p> <p>Now you're ready to model complex documents, build queries, and wrap async flows too.</p>"}]}