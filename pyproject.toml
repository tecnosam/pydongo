[tool.poetry]
name = "pydongo"
version = "0.3.0"
description = "A lightweight ORM for MongoDB using Pydantic models."
authors = ["Samuel Abolo <ikabolo59@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "pydongo" }]
homepage = "https://github.com/tecnosam/pydongo"
repository = "https://github.com/tecnosam/pydongo"
documentation = "https://tecnosam.github.io/pydongo/"
keywords = ["mongodb", "pydantic", "orm", "async", "motor"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]

###   Ruff   ###
[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
exclude = [".venv"]

# Ruff Linter
[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "C4",     # flake8-comprehensions
    "T10",    # flake8-debugger
    "G",      # flake8-logging-format
    "PIE",    # flake8-pie
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "PGH",    # pygrep-hooks
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
    "ARG001", # unused arguments in functions
]
ignore = [
    "PTH123", # builtin-open
    "SIM118", # in-dict-keys
    "G004",   # logging-fstring-interpolation
    # "E501",   # line too long
    "B008", # do not perform function calls in argument defaults
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files.
# Ignore `F401` (unused imports) in all `__init__.py` files
"__init__.py" = ["E402", "F401"]

# Ignore `D` rules everywhere except for the `src/` directory.
# "!src/**.py" = ["D"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.flake8-annotations]
# Allow the omission of a return type hint for __init__ if at least one argument is annotated
mypy-init-return = true

# Ruff Formatter
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"


###   Pylint   ###
[tool.pylint]
max-line-length = 120
disable = """no-member"""

[tool.pylint.similarities]
# Default value is 4.
min-similarity-lines = 100
# Ignore comments when computing similarities.
ignore-comments = true
# Ignore docstrings when computing similarities.
ignore-docstrings = true
# Ignore imports when computing similarities.
ignore-imports = true
# Ignore signatures when computing similarities.
ignore-signatures = true


###   Mypy   ###
[tool.mypy]
strict = true
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
warn_unreachable = true
warn_unused_ignores = true
disallow_subclassing_any = false
plugins = "pydantic.mypy"
exclude = [".venv"]
disable_error_code = ["union-attr", "misc"]

[tool.pydantic-mypy] # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


###   Pytest   ###
[tool.pytest.ini_options] # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["tests"]
xfail_strict = true


###   Coverage   ###
[tool.coverage.run]
omit = ["*/tests/*"]


[tool.poetry.dependencies]
python = ">=3.9"
pymongo = "~4.11"
pydantic = "~2.10"
motor = "~3.7"
mkdocs = "^1.6.1"
pymdown-extensions = "^10.14.3"

[tool.poetry.group.dev.dependencies]
mypy = "1.15.0"
ruff = "^0.11.0"
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
coverage = "^7.4.0"
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.12"
pylint = "^3.3.6"
poethepoet = "^0.34.0"

# Poe Tasks
[tool.poe.tasks]
_ruff_sort = "ruff check pydongo/ tests/ --fix --select I"
_ruff_lint = "ruff check pydongo/ tests/ --fix"
_ruff_fmt = "ruff format pydongo/ tests/"
_pylint_lint = "pylint pydongo/ tests/"
_type_check = "mypy pydongo/ tests/"
_coverage_test = "coverage run -m pytest tests/"
_coverage_report = "coverage html -d coverage"

# Call only below tasks!
lint = ["_ruff_sort", "_ruff_lint", "_ruff_fmt", "_pylint_lint", "_type_check"]
test = ["_coverage_test", "_coverage_report"]

[build-system]
requires = ["poetry-core>=1.8.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
