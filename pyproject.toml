[project]
name = "pydongo"
version = "0.5.0"
description = "A lightweight ORM for MongoDB using Pydantic models."
readme = "README.md"
license = "MIT"
authors = [
    { name = "Samuel Abolo", email = "ikabolo59@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
keywords = [
    "mongodb",
    "pydantic",
    "orm",
    "async",
    "motor",
]
requires-python = ">=3.10"
dependencies = [
    "motor>=3.7.1",
    "pydantic>=2.11.9",
    "pymongo>=4.15.2",
    "tomli-w>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/tecnosam/pydongo"
GitHub = "https://github.com/tecnosam/pydongo"
Documentation = "https://tecnosam.github.io/pydongo/"

[dependency-groups]
dev = [
    "bumpversion>=0.6.0",
    "coverage>=7.10.7",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.21",
    "mypy>=1.18.2",
    "poethepoet>=0.37.0",
    "pymdown-extensions>=10.16.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "ruff>=0.13.3",
    "twine>=6.2.0",
]

[tool.uv]
default-groups = [
    "dev",
]

[tool.ruff]
line-length = 120
fix = true
indent-width = 4
builtins = []

[tool.ruff.lint]
exclude = [
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "build",
    "dist",
    "reports",
    "venv",
    ".ruff_cache",
    ".pytest_cache",
]
select = [
    "ARG",
    "ANN",
    "ASYNC",
    "A",
    "C4",
    "D",
    "DTZ",
    "E",
    "W",
    "F",
    "I",
    "ICN",
    "B",
    "N",
    "UP",
    "YTT",
    "T10",
    "T20",
    "G",
    "PIE",
    "PYI",
    "PT",
    "Q",
    "SIM",
    "TC",
    "TID",
    "PTH",
    "S",
    "PGH",
    "PERF",
    "RET",
    "PLE",
    "PLC",
    "PLR",
    "RUF",
]
ignore = [
    "ANN401",
    "FIX",
    "PTH123",
    "SIM118",
    "G004",
    "D100",
    "D104",
    "D107",
    "D401",
    "D404",
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC002",
]

[tool.ruff.lint.isort]
force-single-line = false

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",
    "PT011",
    "S",
    "PLR2004",
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
exclude = [
    "*.pyi",
    "*.ipynb",
]

[tool.mypy]
junit_xml = "reports/mypy.xml"
strict = true
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
disallow_subclassing_any = false
plugins = "pydantic.mypy"
exclude = [
    ".venv",
]
disable_error_code = [
    "union-attr",
    "misc",
]

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = "--exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
]
testpaths = [
    "tests",
]
xfail_strict = true

[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = [
    "src",
]
omit = [
    "*/tests/*",
]

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.poe.executor]
type = "uv"

[tool.poe.tasks]
_ruff_sort = "ruff check src/ tests/ --fix --select I"
_ruff_lint = "ruff check src/ tests/ --fix"
_ruff_fmt = "ruff format src/ tests/"
_type_check = "mypy src/ tests/"
_coverage_test = "coverage run -m pytest tests/"
_coverage_report = "coverage html -d coverage"
lint = [
    "_ruff_sort",
    "_ruff_lint",
    "_ruff_fmt",
    "_type_check",
]
test = [
    "_coverage_test",
    "_coverage_report",
]

[build-system]
requires = [
    "uv_build>=0.8.22,<0.9.0",
]
build-backend = "uv_build"
